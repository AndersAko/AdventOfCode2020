{"version":3,"sources":["day1/input.txt","day1/day1.js","day2/input.txt","day2/day2.js","day3/input.txt","day3/day3.js","Day.js","App.js","reportWebVitals.js","index.js"],"names":["Day1","props","useState","solution1","setSolution1","solution2","setSolution2","useEffect","fetch","inputData","then","r","text","t","String","split","expenses","expense1","expense2","parseInt","solve1","expense3","solve2","Day2","passwords","console","log","count","word","match","exec","min","max","letter","password","lettercount","first","second","state","Day3","sidePanel","setSidePanel","treecount","trees","right","down","x","rowcount","length","row","treeRow","Array","Math","floor","fill","concat","from","splice","join","random","message","sidePanelText","map","trim","answer","className","value","readOnly","Day","dayComponent","top","left","states","setState","day","position","style","onClick","type","App","_","ix","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a217b17.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/input.413ac430.txt\";","import inputData from './input.txt'\r\nimport React, {useState, useEffect} from 'react'\r\n\r\n\r\nexport default function Day1(props) {\r\n    function solve1(expenses) {\r\n        for (let expense1 of expenses) {\r\n            for (let expense2 of expenses) {\r\n                if (parseInt(expense1) + parseInt(expense2) === 2020) {\r\n                    setSolution1(parseInt(expense1) * parseInt(expense2));\r\n                    return expenses;\r\n                }\r\n            }\r\n        }\r\n        setSolution1('Not found');\r\n        return expenses;\r\n    }\r\n    \r\n    function solve2(expenses) {\r\n        for (let expense1 of expenses) {\r\n            for (let expense2 of expenses) {\r\n                for (let expense3 of expenses) {\r\n    \r\n                    if (parseInt(expense1) + parseInt(expense2) + parseInt(expense3) === 2020) {\r\n                        setSolution2(parseInt(expense1) * parseInt(expense2) * parseInt(expense3));\r\n                        return expenses;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        setSolution2('Not found');\r\n        return expenses;\r\n    }\r\n\r\n    const [solution1, setSolution1] = useState('Unsolved');\r\n    const [solution2, setSolution2] = useState('Unsolved');\r\n\r\n    useEffect( () => {\r\n        fetch(inputData)\r\n        .then(r => r.text())\r\n        .then(t => String(t).split('\\n')) \r\n        .then(t => solve1(t) )\r\n        .then(t => solve2(t) );\r\n    }, [solution1, solution2]);\r\n\r\n    return (\r\n        <div>\r\n            <b>Day1</b><br/>\r\n            Part 1: {solution1}\r\n            <br/>\r\n            Part 2: {solution2}\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/input.e5c3e273.txt\";","import inputData from './input.txt'\r\nimport React, {useState, useEffect} from 'react'\r\n\r\n\r\nexport default function Day2(props) {\r\n    function solve1(passwords) {\r\n        console.log('Solve 1');\r\n        \r\n        let count = 0;\r\n        for (let word of passwords) {\r\n            console.log(word);\r\n            let re = /(\\d+)-(\\d+) (\\w): (\\w+)/g\r\n            let match = re.exec(word);\r\n            //\r\n            let min = parseInt(match[1]);\r\n            let max = parseInt(match[2]);\r\n            let letter = match[3];\r\n            let password = match[4];\r\n            let lettercount = 0;\r\n            for (let char of password) {\r\n                if (char ===letter) {\r\n                    lettercount++;\r\n                }\r\n            }\r\n            if (lettercount >= min && lettercount <= max) {\r\n                console.log('Match found:', word, min, max, letter);\r\n                count++;\r\n            } else {\r\n                console.log('Invalid password:', word, min, max, letter);\r\n            }\r\n        }\r\n        setSolution1(count);\r\n        return passwords;\r\n    }\r\n    \r\n    function solve2(passwords) {\r\n        console.log('Solve 2');\r\n        \r\n        let count = 0;\r\n        for (let word of passwords) {\r\n            console.log(word);\r\n            let re = /(\\d+)-(\\d+) (\\w): (\\w+)/g\r\n            let match = re.exec(word);\r\n            let first = parseInt(match[1]);\r\n            let second = parseInt(match[2]);\r\n            let letter = match[3];\r\n            let password = match[4];\r\n            if ( (password[first-1]===letter) !== (password[second-1]===letter)) {\r\n                console.log('Valid password', word, first, second, letter);\r\n                count++;\r\n            }\r\n        }\r\n        setSolution2(count);\r\n        return passwords;\r\n    }\r\n    const [solution1, setSolution1] = useState('Unsolved');\r\n    const [solution2, setSolution2] = useState('Unsolved');\r\n\r\n    useEffect( () => {\r\n        fetch(inputData)\r\n        .then(r => r.text())\r\n        .then(t => String(t).split('\\n')) \r\n        .then(t => solve1(t) )\r\n        .then(t => solve2(t) );\r\n    }, [solution1, solution2]);\r\n    \r\n    return (\r\n        <div>\r\n            <b>Day 2</b><br/>\r\n            Part 1: {solution1}\r\n            {props.state ==='expanded' && (<><br/> </>) }\r\n            <br/>\r\n            Part 2: {solution2}\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/input.4cd3b3be.txt\";","import inputData from './input.txt'\r\nimport React, {useState, useEffect} from 'react'\r\n\r\n\r\nexport default function Day3(props) {\r\n    const [solution1, setSolution1] = useState('Unsolved');\r\n    const [solution2, setSolution2] = useState('Unsolved');\r\n    const [sidePanel, setSidePanel] = useState('SIDE PANEL');\r\n\r\n    useEffect( () => {\r\n        function treecount(trees, right, down) {\r\n            let x = 0;\r\n            let count = 0;\r\n            for (let rowcount = 0; rowcount<trees.length; rowcount+=down) {\r\n                let row = trees[rowcount];\r\n                let treeRow = Array(row.length * Math.floor(x/row.length)).fill(' ').concat(Array.from(row));\r\n                if (row[x % row.length] === '#') {\r\n                    treeRow.splice(x, 1,'X');\r\n                    count++;\r\n                } else {\r\n                    treeRow.splice(x, 1,'O');\r\n                }\r\n                log(rowcount, treeRow.join(''));\r\n                x +=right;\r\n            }\r\n            return count;\r\n        }\r\n      \r\n        function log(...message) {\r\n            let id = Math.random();\r\n            sidePanelText = sidePanelText.concat('\\n', ...message);\r\n            setSidePanel(sidePanelText);\r\n        }\r\n\r\n        function solve1(trees) {\r\n            console.log('Solve 1');\r\n            let count = treecount(trees, 3, 1);\r\n            setSolution1(count);\r\n        }\r\n\r\n        function solve2(trees) {\r\n            console.log('Solve 2');\r\n            let answer = treecount(trees, 1, 1) * treecount(trees, 3, 1) * treecount(trees, 5, 1) *\r\n                treecount(trees, 7, 1) * treecount(trees, 1, 2);\r\n            setSolution2(answer);\r\n        }\r\n\r\n        let sidePanelText = '';\r\n\r\n        fetch(inputData)\r\n        .then(r => r.text())\r\n        .then(t => String(t).split('\\n').map(r => r.trim())) \r\n        .then(t => solve1(t));\r\n\r\n        fetch(inputData)\r\n        .then(r => r.text())\r\n        .then(t => String(t).split('\\n').map(r => r.trim())) \r\n        .then(t => solve2(t) );\r\n    }, []);\r\n    \r\n    return (\r\n        <div>\r\n            <div className='solution' >\r\n                <b>Day 3</b><br/>\r\n                Part 1: {solution1}\r\n                <br/>\r\n                Part 2: {solution2}\r\n            </div>\r\n            {props.state ==='expanded' && (\r\n                <textarea className='sidepanel' value={sidePanel} readOnly={true} />\r\n            )}\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport Day1 from './day1/day1.js';\r\nimport Day2 from './day2/day2.js';\r\nimport Day3 from './day3/day3.js';\r\nimport './Day.css';\r\n\r\nexport default function Day(props) {\r\n  const states = {\r\n    idle: 'idle',\r\n    active: 'active',\r\n    expanded: 'expanded'\r\n  };\r\n  const [state, setState] = useState(states.idle);\r\n\r\n  var dayComponent;\r\n  switch (props.day) {\r\n    case 1:\r\n      dayComponent = <Day1 />;\r\n      break;\r\n    case 2:\r\n      dayComponent = <Day2 />;\r\n      break;\r\n    case 3:\r\n      dayComponent = <Day3 />;\r\n      break;\r\n    default:\r\n      dayComponent = <div>Not defined yet</div>\r\n  }\r\n\r\n  let top, left; \r\n  switch (state) {\r\n    case states.idle:\r\n    case states.active:\r\n      let position = parseInt(props.day) - 1;\r\n      top = Math.floor(position / 7) * 20 + 15;\r\n      left = (position % 7) * 12 + 8;\r\n      break;\r\n    case states.expanded:\r\n      top = 10;\r\n      left = 10;\r\n      break;\r\n    default:\r\n      top = 0; left=0;\r\n  }\r\n\r\n  switch (state) {\r\n    case states.idle:\r\n      return (\r\n        <div className=\"Day\" style={{ top: top + 'vh', left: left + 'vw' }} onClick={() => setState(states.active)} >\r\n          Day {props.day}\r\n        </div>\r\n      );\r\n    case states.active:\r\n        return (\r\n        <div className=\"Day\" style={{ top: top + 'vh', left: left + 'vw' }} onClick={() => setState(states.expanded)}  >\r\n          <dayComponent.type state={state}/>\r\n        </div>\r\n      );\r\n    case states.expanded:\r\n        return (\r\n        <div className=\"Day expanded\" style={{ top: top + 'vh', left: left + 'vw' }}  >\r\n          <dayComponent.type state={state}/>\r\n          <button type=\"button\" onClick={() => setState(states.idle)}>Close</button>  \r\n        </div>\r\n      );\r\n    default:\r\n      return null;\r\n    }\r\n}\r\n","import Day from './Day.js';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      { Array(25).fill(0).map( (_,ix) => <Day day={ix+1} key={ix}/> ) }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
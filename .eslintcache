[{"/Users/anderskokeritz/Projekt/AdventOfCode2020/src/index.js":"1","/Users/anderskokeritz/Projekt/AdventOfCode2020/src/App.js":"2","/Users/anderskokeritz/Projekt/AdventOfCode2020/src/reportWebVitals.js":"3","/Users/anderskokeritz/Projekt/AdventOfCode2020/src/Day.js":"4","/Users/anderskokeritz/Projekt/AdventOfCode2020/src/day1/day1.js":"5","/Users/anderskokeritz/Projekt/AdventOfCode2020/src/day3/day3.js":"6","/Users/anderskokeritz/Projekt/AdventOfCode2020/src/day2/day2.js":"7","/Users/anderskokeritz/Projekt/AdventOfCode2020/src/day4/day4.js":"8"},{"size":500,"mtime":1606848500767,"results":"9","hashOfConfig":"10"},{"size":199,"mtime":1606855624415,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1606848500768,"results":"12","hashOfConfig":"10"},{"size":1836,"mtime":1607031865785,"results":"13","hashOfConfig":"10"},{"size":1578,"mtime":1607031865786,"results":"14","hashOfConfig":"10"},{"size":2333,"mtime":1607031865788,"results":"15","hashOfConfig":"10"},{"size":2310,"mtime":1607031865786,"results":"16","hashOfConfig":"10"},{"size":1950,"mtime":1607066575006,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1ll23qu",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/anderskokeritz/Projekt/AdventOfCode2020/src/index.js",[],["36","37"],"/Users/anderskokeritz/Projekt/AdventOfCode2020/src/App.js",[],"/Users/anderskokeritz/Projekt/AdventOfCode2020/src/reportWebVitals.js",[],"/Users/anderskokeritz/Projekt/AdventOfCode2020/src/Day.js",[],"/Users/anderskokeritz/Projekt/AdventOfCode2020/src/day1/day1.js",[],"/Users/anderskokeritz/Projekt/AdventOfCode2020/src/day3/day3.js",["38","39"],"import inputData from './input.txt'\nimport React, {useState, useEffect} from 'react'\n\n\nexport default function Day3(props) {\n    const [solution1, setSolution1] = useState('Unsolved');\n    const [solution2, setSolution2] = useState('Unsolved');\n    const [sidePanel, setSidePanel] = useState('');\n\n    useEffect( () => {\n        function treecount(trees, right, down) {\n            let x = 0;\n            let count = 0;\n            for (let rowcount = 0; rowcount<trees.length; rowcount+=down) {\n                let row = trees[rowcount];\n                let treeRow = Array(row.length * Math.floor(x/row.length)).fill('_').concat(Array.from(row));\n                if (row[x % row.length] === '#') {\n                    treeRow.splice(x, 1,'X');\n                    count++;\n                } else {\n                    treeRow.splice(x, 1,'O');\n                }\n                // log(rowcount, treeRow.join(''));\n                x +=right;\n            }\n            return count;\n        }\n      \n        // function log(...message) {\n        //     sidePanelText = sidePanelText.concat('\\n', ...message);\n        //     setSidePanel(sidePanelText);\n        // }\n\n        function solve1(trees) {\n            console.log('Solve 1');\n            let count = treecount(trees, 3, 1);\n            setSolution1(count);\n        }\n\n        function solve2(trees) {\n            console.log('Solve 2');\n            let answer = treecount(trees, 1, 1) * treecount(trees, 3, 1) * treecount(trees, 5, 1) *\n                treecount(trees, 7, 1) * treecount(trees, 1, 2);\n            setSolution2(answer);\n        }\n\n        let sidePanelText = '';\n\n        fetch(inputData)\n        .then(r => r.text())\n        .then(t => String(t).split('\\n').map(r => r.trim())) \n        .then(t => solve1(t));\n\n        fetch(inputData)\n        .then(r => r.text())\n        .then(t => String(t).split('\\n').map(r => r.trim())) \n        .then(t => solve2(t) );\n    }, []);\n    \n    return (\n        <div>\n            <div className='solution' >\n                <b>Day 3</b><br/>\n                Part 1: {solution1}\n                <br/>\n                Part 2: {solution2}\n            </div>\n            {props.state ==='expanded' && (\n                <textarea className='sidepanel' value={sidePanel} readOnly={true} />\n            )}\n        </div>\n    )\n}","/Users/anderskokeritz/Projekt/AdventOfCode2020/src/day2/day2.js",[],"/Users/anderskokeritz/Projekt/AdventOfCode2020/src/day4/day4.js",["40","41","42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":8,"column":23,"nodeType":"50","messageId":"51","endLine":8,"endColumn":35},{"ruleId":"48","severity":1,"message":"52","line":47,"column":13,"nodeType":"50","messageId":"51","endLine":47,"endColumn":26},{"ruleId":"48","severity":1,"message":"53","line":6,"column":23,"nodeType":"50","messageId":"51","endLine":6,"endColumn":35},{"ruleId":"48","severity":1,"message":"54","line":7,"column":23,"nodeType":"50","messageId":"51","endLine":7,"endColumn":35},{"ruleId":"48","severity":1,"message":"49","line":8,"column":23,"nodeType":"50","messageId":"51","endLine":8,"endColumn":35},{"ruleId":"48","severity":1,"message":"52","line":38,"column":13,"nodeType":"50","messageId":"51","endLine":38,"endColumn":26},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'setSidePanel' is assigned a value but never used.","Identifier","unusedVar","'sidePanelText' is assigned a value but never used.","'setSolution1' is assigned a value but never used.","'setSolution2' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
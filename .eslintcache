[{"C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\index.js":"1","C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\reportWebVitals.js":"2","C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\App.js":"3","C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\Day.js":"4","C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\day1\\day1.js":"5","C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\day2\\day2.js":"6","C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\day3\\day3.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":212,"mtime":1606892618240,"results":"11","hashOfConfig":"9"},{"size":1814,"mtime":1606982068372,"results":"12","hashOfConfig":"9"},{"size":1631,"mtime":1606930747989,"results":"13","hashOfConfig":"9"},{"size":2385,"mtime":1606930736574,"results":"14","hashOfConfig":"9"},{"size":2405,"mtime":1607030088001,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"3bm2eg",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\index.js",[],["33","34"],"C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\reportWebVitals.js",[],"C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\App.js",[],"C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\Day.js",[],"C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\day1\\day1.js",[],"C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\day2\\day2.js",[],["35","36"],"C:\\Projekt\\AdventOfCode2020\\aoc2020\\src\\day3\\day3.js",["37","38"],"import inputData from './input.txt'\r\nimport React, {useState, useEffect} from 'react'\r\n\r\n\r\nexport default function Day3(props) {\r\n    const [solution1, setSolution1] = useState('Unsolved');\r\n    const [solution2, setSolution2] = useState('Unsolved');\r\n    const [sidePanel, setSidePanel] = useState('');\r\n\r\n    useEffect( () => {\r\n        function treecount(trees, right, down) {\r\n            let x = 0;\r\n            let count = 0;\r\n            for (let rowcount = 0; rowcount<trees.length; rowcount+=down) {\r\n                let row = trees[rowcount];\r\n                let treeRow = Array(row.length * Math.floor(x/row.length)).fill('_').concat(Array.from(row));\r\n                if (row[x % row.length] === '#') {\r\n                    treeRow.splice(x, 1,'X');\r\n                    count++;\r\n                } else {\r\n                    treeRow.splice(x, 1,'O');\r\n                }\r\n                // log(rowcount, treeRow.join(''));\r\n                x +=right;\r\n            }\r\n            return count;\r\n        }\r\n      \r\n        // function log(...message) {\r\n        //     sidePanelText = sidePanelText.concat('\\n', ...message);\r\n        //     setSidePanel(sidePanelText);\r\n        // }\r\n\r\n        function solve1(trees) {\r\n            console.log('Solve 1');\r\n            let count = treecount(trees, 3, 1);\r\n            setSolution1(count);\r\n        }\r\n\r\n        function solve2(trees) {\r\n            console.log('Solve 2');\r\n            let answer = treecount(trees, 1, 1) * treecount(trees, 3, 1) * treecount(trees, 5, 1) *\r\n                treecount(trees, 7, 1) * treecount(trees, 1, 2);\r\n            setSolution2(answer);\r\n        }\r\n\r\n        let sidePanelText = '';\r\n\r\n        fetch(inputData)\r\n        .then(r => r.text())\r\n        .then(t => String(t).split('\\n').map(r => r.trim())) \r\n        .then(t => solve1(t));\r\n\r\n        fetch(inputData)\r\n        .then(r => r.text())\r\n        .then(t => String(t).split('\\n').map(r => r.trim())) \r\n        .then(t => solve2(t) );\r\n    }, []);\r\n    \r\n    return (\r\n        <div>\r\n            <div className='solution' >\r\n                <b>Day 3</b><br/>\r\n                Part 1: {solution1}\r\n                <br/>\r\n                Part 2: {solution2}\r\n            </div>\r\n            {props.state ==='expanded' && (\r\n                <textarea className='sidepanel' value={sidePanel} readOnly={true} />\r\n            )}\r\n        </div>\r\n    )\r\n}",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"39","replacedBy":"43"},{"ruleId":"41","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":8,"column":23,"nodeType":"47","messageId":"48","endLine":8,"endColumn":35},{"ruleId":"45","severity":1,"message":"49","line":47,"column":13,"nodeType":"47","messageId":"48","endLine":47,"endColumn":26},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],["50"],["51"],"no-unused-vars","'setSidePanel' is assigned a value but never used.","Identifier","unusedVar","'sidePanelText' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]